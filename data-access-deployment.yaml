# data-access-deployment.yaml
apiVersion: v1
kind: ServiceAccount # KSA for Workload Identity
metadata:
  name: data-access-ksa # Name used in IAM binding
  namespace: job-app
  annotations: # Link KSA to GSA
    iam.gke.io/gcp-service-account: data-access-sa@projectcloud-451415.iam.gserviceaccount.com
---
apiVersion: v1
kind: Service
metadata:
  name: data-access-service
  namespace: job-app
  labels:
    app: data-access
spec:
  ports:
  - port: 50051 # Service port
    targetPort: grpc-access # Target the data-access container port
    protocol: TCP
    name: grpc-svc-port
  selector:
    app: data-access
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-access-deployment
  namespace: job-app
  labels:
    app: data-access
spec:
  replicas: 1 # Configure rolling update strategy below
  selector:
    matchLabels:
      app: data-access
  strategy: # Define Rolling Update strategy
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25% # Or 1
      maxSurge: 25% # Or 1
  template:
    metadata:
      labels:
        app: data-access
    spec:
      serviceAccountName: data-access-ksa # Use the KSA configured for Workload Identity
      containers:
      # Application Container
      - name: data-access
        image: europe-west1-docker.pkg.dev/projectcloud-451415/cloudapiservice/data_access:latest # Your actual image
        imagePullPolicy: Always
        ports:
        - containerPort: 50051
          name: grpc-access
        env:
          # DB Host/Port are now handled by the proxy (connect to localhost)
          - name: DB_HOST # Might not be needed if app connects to localhost:5432
            value: "127.0.0.1"
          - name: DB_PORT # Might not be needed if app connects to localhost:5432
            value: "5432"
          # Inject DB Name, User, Password from Secret
          - name: DB_NAME
            valueFrom:
              secretKeyRef:
                name: cloudsql-db-credentials
                key: database
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                name: cloudsql-db-credentials
                key: username
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: cloudsql-db-credentials
                key: password
        # Define Resources (Goal: cost-effective) - ADJUST!
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "250m"
        # Define Probes (Goal: setup your own probes) - ADJUST!
        livenessProbe:
          tcpSocket: { port: grpc-access } # Basic check
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          tcpSocket: { port: grpc-access } # Basic check
          # Add exec probe checking DB connection if possible
          initialDelaySeconds: 5
          periodSeconds: 10
        startupProbe:
          tcpSocket: { port: grpc-access }
          failureThreshold: 30
          periodSeconds: 10

      # Cloud SQL Auth Proxy Sidecar Container
      - name: cloud-sql-proxy
        image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:latest # Use specific version if needed
        args:
          # Add this flag to listen on all interfaces
          - "--address=0.0.0.0"
          # Instance connection name from Cloud SQL instance page
          - "--structured-logs"
          - "--port=5432" # Port the proxy listens on (inside the pod)
          - "projectcloud-451415:europe-west1:datasets" # !!! REPLACE !!!
        securityContext:
          runAsNonRoot: true # Recommended
        # Define Resources for the proxy - ADJUST!
        resources:
          requests:
            memory: "32Mi"
            cpu: "50m"
          limits:
            memory: "64Mi"
            cpu: "100m"
        # Add proxy readiness probe
        readinessProbe:
          tcpSocket:
            port: 5432   # Check if the proxy is listening on its configured port
          initialDelaySeconds: 5
          periodSeconds: 10
          # You can add failureThreshold if needed, default is 3